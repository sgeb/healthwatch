apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
        versionCode 18
        versionName "0.1.8"
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            zipAlign true
        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:+'
    compile 'com.jakewharton:butterknife:4.0.1'
    compile 'com.squareup.retrofit:retrofit:1.3.0'
    compile files('libs/TestFlightLib.jar')
}

// Fill out the properties in signing.properties
ext.props = new Properties()
props.load(new FileInputStream(rootProject.file("signing.properties")))
android.signingConfigs.release.storeFile rootProject.file(props.keyStore)
android.signingConfigs.release.keyAlias props.keyAlias
android.signingConfigs.release.storePassword fetchPassword('keyStorePassword')
android.signingConfigs.release.keyPassword fetchPassword('keyAliasPassword')

import org.apache.tools.ant.taskdefs.condition.Os

def fetchPassword(identifier) {
    if (!Os.isFamily(Os.FAMILY_MAC)) {
        return props.getProperty(identifier)
    }

    def keychainLabel = "release-${identifier}"
    println "Fetching keychain password with account '${name}' and label '${keychainLabel}"

    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    def keychainExec = exec {
        commandLine 'security', '-q', 'find-generic-password', '-a', name, '-gl', "${keychainLabel}"
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue true
    }

    if (keychainExec.exitValue != 0) {
        println stdout.toString()
        println stderr.toString()
        return
    }

    (stderr.toString().trim() =~ /password: "(.*)"/)[0][1]
}
